/*
* MIT License
*
* Copyright (c) 2025 Open Media Transport Contributors
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
*/
#pragma once
#include "vmxcodec.h"
#include <math.h>

#define VMX_ALIGNMENT (64)
#define VMX_BITSSIZE (64)
#define VMX_ALIGN(val, alignment) \
{ \
	while (val % alignment) \
	{ \
		val++; \
	} \
}

const int VMX_MIN_WIDTH = 16;
const int VMX_MIN_HEIGHT = 16;
const int VMX_MAX_WIDTH = 7680;
const int VMX_MAX_HEIGHT = 4320;

//Profile, Resolution, TargetMbps, DCShift, MinQ, Threads
//Highest resolutions must be at start of list

static const int VMX_BR_PROFILE_INDEX = 0;
static const int VMX_BR_RESOLUTION_INDEX = 1;
static const int VMX_BR_TARGET_INDEX = 2;
static const int VMX_BR_SHIFT_INDEX = 3;
static const int VMX_BR_MINQ_INDEX = 4;
static const int VMX_BR_THREADS_INDEX = 5;
static const int VMX_BR_TABLE_COUNT = 36;

static const int VMX_OMT_MINQ = 52;
static const int VMX_MAXQ = 98;

static const int VMX_BITRATE_TABLE[][6]
{
	{VMX_PROFILE_HQ, 4320, 1320, 0, 80, 8},
	{VMX_PROFILE_OMT_HQ, 4320, 1200, 0, VMX_OMT_MINQ, 8},
	{VMX_PROFILE_SQ, 4320, 660, 3, 60, 8},
	{VMX_PROFILE_OMT_SQ, 4320, 600, 3, VMX_OMT_MINQ, 8},
	{VMX_PROFILE_LQ, 4320, 440, 3, 60, 8},
	{VMX_PROFILE_OMT_LQ, 4320, 400, 3, VMX_OMT_MINQ, 8},

	{VMX_PROFILE_HQ, 2160, 800, 0, 80, 4},
	{VMX_PROFILE_OMT_HQ, 2160, 600, 0, VMX_OMT_MINQ, 4},
	{VMX_PROFILE_SQ, 2160, 400, 3, 60, 4},
	{VMX_PROFILE_OMT_SQ, 2160, 300, 3, VMX_OMT_MINQ, 4},
	{VMX_PROFILE_LQ, 2160, 266, 3, 60, 4},
	{VMX_PROFILE_OMT_LQ, 2160, 200, 3, VMX_OMT_MINQ, 4},

	{VMX_PROFILE_HQ, 1440, 504, 0, 80, 4},
	{VMX_PROFILE_OMT_HQ, 1440, 450, 0, VMX_OMT_MINQ, 4},
	{VMX_PROFILE_SQ, 1440, 252, 3, 60, 4},
	{VMX_PROFILE_OMT_SQ, 1440, 300, 0, VMX_OMT_MINQ, 4},
	{VMX_PROFILE_LQ, 1440, 168, 3, 60, 4},
	{VMX_PROFILE_OMT_LQ, 1440, 120, 3, VMX_OMT_MINQ, 4},

	{VMX_PROFILE_HQ, 1080, 260, 0, 80, 2},
	{VMX_PROFILE_OMT_HQ, 1080, 260, 0, VMX_OMT_MINQ, 2},
	{VMX_PROFILE_SQ, 1080, 130, 3, 60, 2},
	{VMX_PROFILE_OMT_SQ, 1080, 200, 0, VMX_OMT_MINQ, 2},
	{VMX_PROFILE_LQ, 1080, 86, 3, 60, 2},
	{VMX_PROFILE_OMT_LQ, 1080, 86, 3, VMX_OMT_MINQ, 2},

	{VMX_PROFILE_HQ, 720, 136, 0, 80, 2},
	{VMX_PROFILE_OMT_HQ, 720, 136, 0, VMX_OMT_MINQ, 2},
	{VMX_PROFILE_SQ, 720, 68, 3, 60, 2},
	{VMX_PROFILE_OMT_SQ, 720, 68, 3, VMX_OMT_MINQ, 2},
	{VMX_PROFILE_LQ, 720, 45, 3, 60, 2},
	{VMX_PROFILE_OMT_LQ, 720, 45, 3, VMX_OMT_MINQ, 2},

	{VMX_PROFILE_HQ, 0, 72, 0, 80, 2},
	{VMX_PROFILE_OMT_HQ, 0, 72, 0, VMX_OMT_MINQ, 2},
	{VMX_PROFILE_SQ, 0, 36, 3, 60, 2},
	{VMX_PROFILE_OMT_SQ, 0, 36, 3, VMX_OMT_MINQ, 2},
	{VMX_PROFILE_LQ, 0, 24, 3, 60, 2},
	{VMX_PROFILE_OMT_LQ, 0, 24, 3, VMX_OMT_MINQ, 2},
};


static unsigned short VMX_DEFAULT_QUANTIZATION_MATRIX[64] =
{ 16, 16, 19, 22, 26, 27, 29, 34,
16, 16, 22, 24, 27, 29, 34, 37,
19, 22, 26, 27, 29, 34, 34, 38,
22, 22, 26, 27, 29, 34, 37, 40,
22, 26, 27, 29, 32, 35, 40, 48,
26, 27, 29, 32, 35, 40, 48, 58,
26, 27, 29, 34, 38, 46, 56, 69,
27, 29, 35, 38, 46, 56, 69, 83 };

static BYTE VMX_ZIGZAGINV[64] =
{
	0,1,5,6,14,15,27,28,
	2,4,7,13,16,26,29,42,
	3,8,12,17,25,30,41,43,
	9,11,18,24,31,40,44,53,
	10,19,23,32,39,45,52,54,
	20,22,33,38,46,51,55,60,
	21,34,37,47,50,56,59,61,
	35,36,48,49,57,58,62,63
};

const BYTE VMX_ZIGZAG[64] = {
	0,   1,  8, 16,  9,  2,  3, 10,
	17, 24, 32, 25, 18, 11,  4,  5,
	12, 19, 26, 33, 40, 48, 41, 34,
	27, 20, 13,  6,  7, 14, 21, 28,
	35, 42, 49, 56, 57, 50, 43, 36,
	29, 22, 15, 23, 30, 37, 44, 51,
	58, 59, 52, 45, 38, 31, 39, 46,
	53, 60, 61, 54, 47, 55, 62, 63
};



static int VMX_QUALITY[VMX_QUALITY_COUNT] = { 1,2,3,4,5,6,7,8,10,12,14,16,18,20,22,24,28,32,36,40,44,48,52,56,64 };

//Color Conversion Tables
struct ShortRGB
{
	short R;
	short G;
	short B;
};

//BT709 (0.2126) (0.7152) (0.0722)
// Y=
// R 0.2126 * 220 = 46.772
// G 0.7152 * 220 = 157.344
// B 0.0722 * 220 = 15.884
// U=
// R ((0.5 / (1-0.0722))*-0.2126 * 224 = -25.66415
// G ((0.5 / (1-0.0722))*-0.7152) * 224 = -86.33584
// B 0.5 * 224 = 112
// V=
// R 0.5 * 224 = 112
// G ((0.5 / (1-0.2126))*-0.7152 * 224 = -101.7302
// B ((0.5 / (1-0.2126))*-0.0722) * 224 = -10.26974
static const ShortRGB RGB_YUV_709[]
{
	{47,157,16},
	{-26,-86,112},
	{112,-102,-10}
};
//INVERSE
// R = Y + V * ((2*(1-0.2126))*(255/224))
// G = Y - (((2*0.0722*(1-0.0722))/0.7152)*(255/224)) * U - (((2*0.2126*(1-0.2126))/0.7152)*(255/224)) * V
// B = Y + U * ((2*(1-0.0722))*(255/224))
// R = Y + (V * 1.792741071)
// G = Y - 0.213248614 * U - 0.532909329 * V
// B = Y + U * 2.112401786
//MULTIPLY BY 16384 FOR INTRINSICS
// Expanded Y = (255/219) * 16384 = 1.164383562 * 16384 = 19077
// R = 1.792741071 * 16384 = 29372 
// GU = 0.213248614 * 16384 = 3494
// GV = 0.532909329 * 16384 = 8731
// B = 2.112401786 * 16384 = 34609.59086 (further / 2 to fit in 16bit) = 17305
static const short YUV_RGB_709[]
{
	19077, //Y
	29372, //R
	3494, //GU
	8731, //GV
	17305 //B
};

//BT601 (0.299) (0.587) (0.114)
// Y=
// R 0.299 * 220 = 65.78
// G 0.587 * 220 = 129.14
// B 0.114 * 220 = 25.08
// U=
// R ((0.5 / (1-0.114))*-0.299 * 224 = -37.796839
// G ((0.5 / (1-0.114))*-0.587 * 224 = -74.20316
// B 0.5 * 224 = 112
// V=
// R 0.5 * 224 = 112
// G ((0.5 / (1-0.299))*-0.587 * 224 = -93.786
// B ((0.5 / (1-0.299))*-0.114) * 224 = -18.21398
static const ShortRGB RGB_YUV_601[]
{
	{66,129,25},
	{-38,-74,112},
	{112,-94,-18}
};
//INVERSE
// R = Y + V * ((2*(1-0.299))*(255/224))
// G = Y - (((2*0.114*(1-0.114))/0.587)*(255/224)) * U - (((2*0.299*(1-0.299))/0.587)*(255/224)) * V
// B = Y + U * ((2*(1-0.114))*(255/224))
// R = Y + (V * 1.596026786)
// G = Y - 0.39176229 * U - 0.812967647 * V
// B = Y + U * 2.017232143
//MULTIPLY BY 16384 FOR INTRINSICS
// Expanded Y = (255/219) * 16384 = 1.164383562 * 16384 = 19077
// R = 1.596026786 * 16384 = 26149
// GU = 0.39176229 * 16384 = 6419
// GV = 0.812967647 * 16384 = 13320
// B = 2.017232143 * 16384 = 33050.33143 (further / 2 to fit in 16bit) = 16525
static const short YUV_RGB_601[]
{
	19077, //Y
	26149, //R
	6419, //GU
	13320, //GV
	16525 //B
};

//IDCT
#define BITS_INV_ACC 5 //4
#define SHIFT_INV_ROW 16 - BITS_INV_ACC
#define SHIFT_INV_COL 1 + BITS_INV_ACC
const short IRND_INV_ROW = 1024 * (6 - BITS_INV_ACC);	//1 << (SHIFT_INV_ROW-1)
const short IRND_INV_COL = 16 * (BITS_INV_ACC - 3);		// 1 << (SHIFT_INV_COL-1)
const short IRND_INV_CORR = IRND_INV_COL - 1;			// correction -1.0 and round

//IDCT10
#define BITS_INV_ACC10 4
#define SHIFT_INV_ROW10 16 - BITS_INV_ACC10
#define SHIFT_INV_COL10 1 + BITS_INV_ACC10
const short IRND_INV_ROW10 = 1024 * (6 - BITS_INV_ACC10);	//1 << (SHIFT_INV_ROW-1)
const short IRND_INV_COL10 = 16 * (BITS_INV_ACC10 - 3);		// 1 << (SHIFT_INV_COL-1)
const short IRND_INV_CORR10 = IRND_INV_COL10 - 1;			// correction -1.0 and round

//FDCT
#define BITS_FRW_ACC   3
#define SHIFT_FRW_COL  BITS_FRW_ACC
#define SHIFT_FRW_ROW  (BITS_FRW_ACC + 17) - 4 //Shift 4 less (16) due to divide by 16 at quant stage
#define RND_FRW_ROW    (1 << (SHIFT_FRW_ROW-1))

//FDCT10
#define BITS_FRW_ACC10   1
#define SHIFT_FRW_COL10  BITS_FRW_ACC10
#define SHIFT_FRW_ROW10  (BITS_FRW_ACC10 + 17) - 2 //Shift 2 less (4) due to divide by 16 at quant stage and preserving extra 2 bits for 10-bit
#define RND_FRW_ROW10    (1 << (SHIFT_FRW_ROW10-1))

const unsigned short FDCT_ROUND1 = 1;
const unsigned short FDCT_TAN1 = 13036; //tan(pi / 16)
const unsigned short FDCT_TAN2 = 27146; // tan(2pi / 16)  (= sqrt(2) - 1)
const unsigned short FDCT_TAN3 = 43790; // tan(3pi / 16) - 1
const unsigned short FDCT_SQRT2 = 23170; // 0.5 / sqrt(2)

static const buffer_t BitsLeftLookup[] = { 0,1ULL,2ULL,4ULL,8ULL,16ULL,32ULL,64ULL,128ULL,256ULL,512ULL,1024ULL,2048ULL,4096ULL,8192ULL,16384ULL,32768ULL,65536ULL,131072ULL,262144ULL,524288ULL,1048576ULL,2097152ULL,4194304ULL,8388608ULL,16777216ULL,33554432ULL,67108864ULL,134217728ULL,268435456ULL,536870912ULL,1073741824ULL,2147483648ULL,4294967296ULL,8589934592ULL,17179869184ULL,34359738368ULL,68719476736ULL,137438953472ULL,274877906944ULL,549755813888ULL,1099511627776ULL,2199023255552ULL,4398046511104ULL,8796093022208ULL,17592186044416ULL,35184372088832ULL,70368744177664ULL,140737488355328ULL,281474976710656ULL,562949953421312ULL,1125899906842624ULL,2251799813685248ULL,4503599627370496ULL,9007199254740992ULL,18014398509481984ULL,36028797018963968ULL,72057594037927936ULL,144115188075855872ULL,288230376151711744ULL,576460752303423488ULL,1152921504606846976ULL,2305843009213693952ULL,4611686018427387904ULL,9223372036854775808ULL };

//LengthLut is the equivalent of:
//	 result = 32 - __lzcnt(input); 
//	 result = result + result - 1;
//__declspec(align(16)) static const BYTE GolombLengthLut[] = { 1,1,3,3,5,5,5,5,7,7,7,7,7,7,7,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
//17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,

//21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,


//};
__declspec(align(16)) static const BYTE GolombLengthLut[] = { 1,1,3,3,5,5,5,5,7,7,7,7,7,7,7,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,




21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,





};

struct GolombZeroCodeLookup
{
	buffer_t value;
	buffer_t length;
};
//Lookup complete zero Exp-Golomb codes with length for values up to 64.
//64 is fine here since zeros that span across blocks are computed separately as they can get very large
__declspec(align(16)) static const GolombZeroCodeLookup GolombZeroCodeLut[] = {
{0,0},{3,2},{10,4},{11,4},{36,6},{37,6},{38,6},{39,6},{136,8},{137,8},{138,8},{139,8},{140,8},{141,8},{142,8},{143,8},{528,10},{529,10},{530,10},{531,10},{532,10},{533,10},{534,10},{535,10},{536,10},{537,10},{538,10},{539,10},{540,10},{541,10},{542,10},{543,10},{2080,12},{2081,12},{2082,12},{2083,12},{2084,12},{2085,12},{2086,12},{2087,12},{2088,12},{2089,12},{2090,12},{2091,12},{2092,12},{2093,12},{2094,12},{2095,12},{2096,12},{2097,12},{2098,12},{2099,12},{2100,12},{2101,12},{2102,12},{2103,12},{2104,12},{2105,12},{2106,12},{2107,12},{2108,12},{2109,12},{2110,12},{2111,12} };


struct GolombLookup
{
	int8_t zeros;
	int8_t value;
	int16_t length; //16bit to ensure 32bit alignment
};


//16KB Decode LUT for 1x zero code or 1x value code that can fit within 12 bits. 
//0 length means manual decoding required
//Also factors in any additional 1x zero code after the value code as long as both would fit into 12 bits.
//This has the possibility it may overread the bitstream into the next plane, see notes on REWINDOVERREAD for how this is resolved.
__declspec(align(16)) static const GolombLookup GolombLookupLut[] = {
{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},
{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},
{1,-16,11},{1,-16,11},{1,16,11},{1,16,11},{1,-17,11},{1,-17,11},{1,17,11},{1,17,11},{1,-18,11},{1,-18,11},{1,18,11},{1,18,11},{1,-19,11},{1,-19,11},{1,19,11},{1,19,11},{1,-20,11},{1,-20,11},{1,20,11},{1,20,11},{1,-21,11},{1,-21,11},{1,21,11},{1,21,11},{1,-22,11},{1,-22,11},{1,22,11},{1,22,11},{1,-23,11},{1,-23,11},{1,23,11},{1,23,11},
{1,-24,11},{1,-24,11},{1,24,11},{1,24,11},{1,-25,11},{1,-25,11},{1,25,11},{1,25,11},{1,-26,11},{1,-26,11},{1,26,11},{1,26,11},{1,-27,11},{1,-27,11},{1,27,11},{1,27,11},{1,-28,11},{1,-28,11},{1,28,11},{1,28,11},{1,-29,11},{1,-29,11},{1,29,11},{1,29,11},{1,-30,11},{1,-30,11},{1,30,11},{1,30,11},{1,-31,11},{1,-31,11},{1,31,11},{1,31,11},
{1,-8,9},{1,-8,9},{1,-8,9},{1,-8,9},{1,-8,9},{1,-8,9},{2,-8,11},{2,-8,11},{1,8,9},{1,8,9},{1,8,9},{1,8,9},{1,8,9},{1,8,9},{2,8,11},{2,8,11},{1,-9,9},{1,-9,9},{1,-9,9},{1,-9,9},{1,-9,9},{1,-9,9},{2,-9,11},{2,-9,11},{1,9,9},{1,9,9},{1,9,9},{1,9,9},{1,9,9},{1,9,9},{2,9,11},{2,9,11},
{1,-10,9},{1,-10,9},{1,-10,9},{1,-10,9},{1,-10,9},{1,-10,9},{2,-10,11},{2,-10,11},{1,10,9},{1,10,9},{1,10,9},{1,10,9},{1,10,9},{1,10,9},{2,10,11},{2,10,11},{1,-11,9},{1,-11,9},{1,-11,9},{1,-11,9},{1,-11,9},{1,-11,9},{2,-11,11},{2,-11,11},{1,11,9},{1,11,9},{1,11,9},{1,11,9},{1,11,9},{1,11,9},{2,11,11},{2,11,11},
{1,-12,9},{1,-12,9},{1,-12,9},{1,-12,9},{1,-12,9},{1,-12,9},{2,-12,11},{2,-12,11},{1,12,9},{1,12,9},{1,12,9},{1,12,9},{1,12,9},{1,12,9},{2,12,11},{2,12,11},{1,-13,9},{1,-13,9},{1,-13,9},{1,-13,9},{1,-13,9},{1,-13,9},{2,-13,11},{2,-13,11},{1,13,9},{1,13,9},{1,13,9},{1,13,9},{1,13,9},{1,13,9},{2,13,11},{2,13,11},
{1,-14,9},{1,-14,9},{1,-14,9},{1,-14,9},{1,-14,9},{1,-14,9},{2,-14,11},{2,-14,11},{1,14,9},{1,14,9},{1,14,9},{1,14,9},{1,14,9},{1,14,9},{2,14,11},{2,14,11},{1,-15,9},{1,-15,9},{1,-15,9},{1,-15,9},{1,-15,9},{1,-15,9},{2,-15,11},{2,-15,11},{1,15,9},{1,15,9},{1,15,9},{1,15,9},{1,15,9},{1,15,9},{2,15,11},{2,15,11},
{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{1,-4,7},{3,-4,11},{3,-4,11},{4,-4,11},{4,-4,11},{2,-4,9},{2,-4,9},{2,-4,9},{2,-4,9},{2,-4,9},{2,-4,9},{2,-4,9},{2,-4,9},
{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{1,4,7},{3,4,11},{3,4,11},{4,4,11},{4,4,11},{2,4,9},{2,4,9},{2,4,9},{2,4,9},{2,4,9},{2,4,9},{2,4,9},{2,4,9},
{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{1,-5,7},{3,-5,11},{3,-5,11},{4,-5,11},{4,-5,11},{2,-5,9},{2,-5,9},{2,-5,9},{2,-5,9},{2,-5,9},{2,-5,9},{2,-5,9},{2,-5,9},
{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{1,5,7},{3,5,11},{3,5,11},{4,5,11},{4,5,11},{2,5,9},{2,5,9},{2,5,9},{2,5,9},{2,5,9},{2,5,9},{2,5,9},{2,5,9},
{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{1,-6,7},{3,-6,11},{3,-6,11},{4,-6,11},{4,-6,11},{2,-6,9},{2,-6,9},{2,-6,9},{2,-6,9},{2,-6,9},{2,-6,9},{2,-6,9},{2,-6,9},
{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{1,6,7},{3,6,11},{3,6,11},{4,6,11},{4,6,11},{2,6,9},{2,6,9},{2,6,9},{2,6,9},{2,6,9},{2,6,9},{2,6,9},{2,6,9},
{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{1,-7,7},{3,-7,11},{3,-7,11},{4,-7,11},{4,-7,11},{2,-7,9},{2,-7,9},{2,-7,9},{2,-7,9},{2,-7,9},{2,-7,9},{2,-7,9},{2,-7,9},
{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{1,7,7},{3,7,11},{3,7,11},{4,7,11},{4,7,11},{2,7,9},{2,7,9},{2,7,9},{2,7,9},{2,7,9},{2,7,9},{2,7,9},{2,7,9},
{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},
{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},
{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{1,-2,5},{5,-2,11},{5,-2,11},{6,-2,11},{6,-2,11},{7,-2,11},{7,-2,11},{8,-2,11},{8,-2,11},{3,-2,9},{3,-2,9},{3,-2,9},{3,-2,9},{3,-2,9},{3,-2,9},{3,-2,9},{3,-2,9},{4,-2,9},{4,-2,9},{4,-2,9},{4,-2,9},{4,-2,9},{4,-2,9},{4,-2,9},{4,-2,9},
{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},{2,-2,7},
{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},
{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},
{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{1,2,5},{5,2,11},{5,2,11},{6,2,11},{6,2,11},{7,2,11},{7,2,11},{8,2,11},{8,2,11},{3,2,9},{3,2,9},{3,2,9},{3,2,9},{3,2,9},{3,2,9},{3,2,9},{3,2,9},{4,2,9},{4,2,9},{4,2,9},{4,2,9},{4,2,9},{4,2,9},{4,2,9},{4,2,9},
{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},{2,2,7},
{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},
{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},
{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{1,-3,5},{5,-3,11},{5,-3,11},{6,-3,11},{6,-3,11},{7,-3,11},{7,-3,11},{8,-3,11},{8,-3,11},{3,-3,9},{3,-3,9},{3,-3,9},{3,-3,9},{3,-3,9},{3,-3,9},{3,-3,9},{3,-3,9},{4,-3,9},{4,-3,9},{4,-3,9},{4,-3,9},{4,-3,9},{4,-3,9},{4,-3,9},{4,-3,9},
{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},{2,-3,7},
{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},
{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},
{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{1,3,5},{5,3,11},{5,3,11},{6,3,11},{6,3,11},{7,3,11},{7,3,11},{8,3,11},{8,3,11},{3,3,9},{3,3,9},{3,3,9},{3,3,9},{3,3,9},{3,3,9},{3,3,9},{3,3,9},{4,3,9},{4,3,9},{4,3,9},{4,3,9},{4,3,9},{4,3,9},{4,3,9},{4,3,9},
{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},{2,3,7},
{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},
{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},
{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},
{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},
{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},
{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},
{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},
{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},
{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},{1,-1,3},
{5,-1,9},{5,-1,9},{5,-1,9},{5,-1,9},{5,-1,9},{5,-1,9},{5,-1,9},{5,-1,9},{6,-1,9},{6,-1,9},{6,-1,9},{6,-1,9},{6,-1,9},{6,-1,9},{6,-1,9},{6,-1,9},{7,-1,9},{7,-1,9},{7,-1,9},{7,-1,9},{7,-1,9},{7,-1,9},{7,-1,9},{7,-1,9},{8,-1,9},{8,-1,9},{8,-1,9},{8,-1,9},{8,-1,9},{8,-1,9},{8,-1,9},{8,-1,9},
{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},{3,-1,7},
{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},{4,-1,7},
{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},
{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},
{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},
{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},{2,-1,5},
{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},
{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},
{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},
{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},
{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},
{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},
{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},
{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},
{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},{1,1,3},
{5,1,9},{5,1,9},{5,1,9},{5,1,9},{5,1,9},{5,1,9},{5,1,9},{5,1,9},{6,1,9},{6,1,9},{6,1,9},{6,1,9},{6,1,9},{6,1,9},{6,1,9},{6,1,9},{7,1,9},{7,1,9},{7,1,9},{7,1,9},{7,1,9},{7,1,9},{7,1,9},{7,1,9},{8,1,9},{8,1,9},{8,1,9},{8,1,9},{8,1,9},{8,1,9},{8,1,9},{8,1,9},
{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},{3,1,7},
{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},{4,1,7},
{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},
{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},
{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},
{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},{2,1,5},
{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},
{32,0,12},{33,0,12},{34,0,12},{35,0,12},{36,0,12},{37,0,12},{38,0,12},{39,0,12},{40,0,12},{41,0,12},{42,0,12},{43,0,12},{44,0,12},{45,0,12},{46,0,12},{47,0,12},{48,0,12},{49,0,12},{50,0,12},{51,0,12},{52,0,12},{53,0,12},{54,0,12},{55,0,12},{56,0,12},{57,0,12},{58,0,12},{59,0,12},{60,0,12},{61,0,12},{62,0,12},{63,0,12},
{16,0,10},{16,0,10},{16,0,10},{16,0,10},{17,0,10},{17,0,10},{17,0,10},{17,0,10},{18,0,10},{18,0,10},{18,0,10},{18,0,10},{19,0,10},{19,0,10},{19,0,10},{19,0,10},{20,0,10},{20,0,10},{20,0,10},{20,0,10},{21,0,10},{21,0,10},{21,0,10},{21,0,10},{22,0,10},{22,0,10},{22,0,10},{22,0,10},{23,0,10},{23,0,10},{23,0,10},{23,0,10},
{24,0,10},{24,0,10},{24,0,10},{24,0,10},{25,0,10},{25,0,10},{25,0,10},{25,0,10},{26,0,10},{26,0,10},{26,0,10},{26,0,10},{27,0,10},{27,0,10},{27,0,10},{27,0,10},{28,0,10},{28,0,10},{28,0,10},{28,0,10},{29,0,10},{29,0,10},{29,0,10},{29,0,10},{30,0,10},{30,0,10},{30,0,10},{30,0,10},{31,0,10},{31,0,10},{31,0,10},{31,0,10},
{8,0,8},{8,0,8},{8,0,8},{8,0,8},{8,0,8},{8,0,8},{8,0,8},{8,0,8},{8,0,8},{8,0,8},{8,0,8},{8,0,8},{8,0,8},{8,0,8},{8,0,8},{8,0,8},{9,0,8},{9,0,8},{9,0,8},{9,0,8},{9,0,8},{9,0,8},{9,0,8},{9,0,8},{9,0,8},{9,0,8},{9,0,8},{9,0,8},{9,0,8},{9,0,8},{9,0,8},{9,0,8},
{10,0,8},{10,0,8},{10,0,8},{10,0,8},{10,0,8},{10,0,8},{10,0,8},{10,0,8},{10,0,8},{10,0,8},{10,0,8},{10,0,8},{10,0,8},{10,0,8},{10,0,8},{10,0,8},{11,0,8},{11,0,8},{11,0,8},{11,0,8},{11,0,8},{11,0,8},{11,0,8},{11,0,8},{11,0,8},{11,0,8},{11,0,8},{11,0,8},{11,0,8},{11,0,8},{11,0,8},{11,0,8},
{12,0,8},{12,0,8},{12,0,8},{12,0,8},{12,0,8},{12,0,8},{12,0,8},{12,0,8},{12,0,8},{12,0,8},{12,0,8},{12,0,8},{12,0,8},{12,0,8},{12,0,8},{12,0,8},{13,0,8},{13,0,8},{13,0,8},{13,0,8},{13,0,8},{13,0,8},{13,0,8},{13,0,8},{13,0,8},{13,0,8},{13,0,8},{13,0,8},{13,0,8},{13,0,8},{13,0,8},{13,0,8},
{14,0,8},{14,0,8},{14,0,8},{14,0,8},{14,0,8},{14,0,8},{14,0,8},{14,0,8},{14,0,8},{14,0,8},{14,0,8},{14,0,8},{14,0,8},{14,0,8},{14,0,8},{14,0,8},{15,0,8},{15,0,8},{15,0,8},{15,0,8},{15,0,8},{15,0,8},{15,0,8},{15,0,8},{15,0,8},{15,0,8},{15,0,8},{15,0,8},{15,0,8},{15,0,8},{15,0,8},{15,0,8},
{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},
{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},{4,0,6},
{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},
{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},{5,0,6},
{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},
{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},{6,0,6},
{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},
{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},{7,0,6},
{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},
{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},
{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},
{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},
{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},
{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},
{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},
{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},
{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},
{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},
{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},
{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},
{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},
{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},
{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},
{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},{3,0,4},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},{1,0,2},
{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},
{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},
{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},
{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},
{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},
{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},{2,0,4},
{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},
{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{3,0,6},{4,0,8},{4,0,8},{4,0,8},{4,0,8},{4,0,8},{4,0,8},{4,0,8},{4,0,8},{4,0,8},{4,0,8},{4,0,8},{4,0,8},{5,0,10},{5,0,10},{5,0,10},{6,0,12},
};

#define GetIntFrom2MagSign(i) (((i + (i & 1)) >> 1) - ((i + (i & 1)) * (i & 1)))

#define FLUSHREADBITS(data) \
{ \
	if (data.BitsLeft == 0U) \
	{ \
		data.BitsLeft = VMX_BITSSIZE; \
		data.StreamPos += 8; \
		buffer_t * s = (buffer_t *)data.StreamPos; \
		data.TempRead = VMX_BUFFERSWAP(*s); \
	} \
}
#define GETBIT(data, val) \
{ \
	data.BitsLeft -= 1; \
	val = ((data.TempRead >> data.BitsLeft) & 1); \
	FLUSHREADBITS(data); \
}

#define GETBITB(data, val) \
{ \
	data.BitsLeft -= 1; \
	val = ((data.TempRead >> data.BitsLeft) & 1); \
}

#define RELOADBITS(data) \
{ \
   if (data.BitsLeft < 32) \
   { \
		int n = (VMX_BITSSIZE - data.BitsLeft) >> 3; \
		data.StreamPos += n; \
		buffer_t * s = (buffer_t *)data.StreamPos; \
		data.TempRead = VMX_BUFFERSWAP(*s); \
		data.BitsLeft += (n<<3); \
   } \
}

#define GETZEROS(data, nz) { \
	nz = __lzcnt64(data.TempRead << (VMX_BITSSIZE - data.BitsLeft)); \
	if (nz >= data.BitsLeft) { \
		nz = data.BitsLeft; \
		data.BitsLeft = 0; \
		FLUSHREADBITS(data); \
		buffer_t nz2 = __lzcnt64(data.TempRead); \
		data.BitsLeft -= nz2; \
		nz += nz2; \
	} \
	else { \
		data.BitsLeft -= nz; \
	} \
}

#define GETBITSB(data, numBits, n) { \
			data.BitsLeft -= numBits; \
			n = (data.TempRead >> data.BitsLeft) & ((1 << numBits) - 1); \
	}

#define GETBITS(data, numBits, n) { \
	n = 0; \
	while (numBits > 0U) \
	{ \
		b = numBits; \
		if (b > data.BitsLeft) \
		{ \
			b = data.BitsLeft; \
		} \
		if (n) \
		{ \
			n <<= b; \
		} \
		data.BitsLeft -= b; \
		n |= (data.TempRead >> data.BitsLeft) & ((1 << b) - 1); \
		numBits -= b; \
		FLUSHREADBITS(data); \
	} \
}

#define GETZEROSB(data, nz) { \
	nz = __lzcnt64(data.TempRead << (VMX_BITSSIZE - data.BitsLeft)); \
	data.BitsLeft -= nz; \
}

//LUT optimization may read a zero code from the next plane.
//Importantly, each plane bitstream start is byte aligned so RELOADBITS wont erase this data, meaning it is safe to wind back here.
//The exception is the exceedingly rare chance of an 8bit zero code (1000****), so the LUT intentionally excludes that possibility.
#define REWINDOVERREAD(data) { \
if (termsToDecode > 0 && termsToDecode < 64) { \
	GolombZeroCodeLookup l = GolombZeroCodeLut[termsToDecode]; \
	data.BitsLeft += l.length; \
} \
}

#define FLUSHREMAININGREADBITS(data) \
{ \
	if (data.BitsLeft < VMX_BITSSIZE) \
	{ \
		unsigned int n; \
		buffer_t r = data.BitsLeft & 7U; \
		GETBITS(data, r, n); \
	} \
	FLUSHREADBITS(data); \
}

#define FlushRemainingBits(data) \
{ \
		if (data.BitsLeft < VMX_BITSSIZE) \
		{ \
			int bitsToWrite = VMX_BITSSIZE - data.BitsLeft; \
				while (bitsToWrite > 0) \
				{ \
					data.StreamPos[0] = data.Temp >> (VMX_BITSSIZE - 8); \
					data.StreamPos += 1; \
					data.Temp <<= 8; \
					bitsToWrite -= 8; \
				} \
					data.BitsLeft = VMX_BITSSIZE; \
					data.Temp = 0; \
		} \
}
#define Get2MagSign(input)((input + input) ^ (input >> 15))

#define EncodeDC(data, val) \
{ \
 if (val) \
 { \
	 input = Get2MagSign(val) + 1; \
	 data.BitsLeft -= GolombLengthLut[input]; \
	 buffer_t t = input; \
	 t <<= data.BitsLeft; \
	 data.Temp |= t; \
 } \
 else \
 { 	data.BitsLeft -= 2; \
	buffer_t t = 3; \
	t <<= data.BitsLeft; \
	data.Temp |= t; \
 } \
} 

#define EmitBits32(data) \
{ \
	if (data.BitsLeft < 33) { \
		\
			buffer_t* s = (buffer_t*)data.StreamPos; \
			* s = VMX_BUFFERSWAP(data.Temp); \
			data.Temp <<= 32; \
			data.StreamPos += 4; \
			data.BitsLeft += 32; \
	} \
}

#define EmitBitsMax(data) \
{ \
	buffer_t* s = (buffer_t*)data.StreamPos; \
	* s = VMX_BUFFERSWAP(data.Temp); \
	int bytes = (64 - data.BitsLeft) >> 3; \
	data.Temp <<= (bytes * 8); \
	data.StreamPos += bytes; \
	data.BitsLeft += (bytes * 8); \
}

#define EncodeZeros(data) { \
	if (numZeros) { \
		bc = 32 - __lzcnt(numZeros); \
		data.Temp |= BitsLeftLookup[data.BitsLeft]; \
		data.BitsLeft -= bc + bc; \
		buffer_t t = numZeros; \
		t <<= data.BitsLeft; \
		data.Temp |= t; \
		numZeros = 0; \
		pos += nz; \
	} \
}

//Running this regardless of if nz is > 0, as removing the branch results in a 20% performance gain, despite the wasted instructions!
//Using LUTs is great if we can remove a branch, as the cost penalty is not severe (note for EncodeZeros above we can't do the same!)
#define EncodeZerosSmall(data) { \
		zeroLut = GolombZeroCodeLut[nz]; \
		pos += nz; \
		data.BitsLeft -= zeroLut.length; \
		data.Temp |= (zeroLut.value << data.BitsLeft); \
}

#define EncodeValue(data, input) { \
	data.BitsLeft -= GolombLengthLut[input]; \
	buffer_t t = input; \
	t <<= data.BitsLeft; \
	data.Temp |= t; \
}


inline void VMX_CreateAlignedStrideBuffer(BYTE* src, int srcStride, VMX_SIZE srcSize, BYTE** aligned, int* alignedStride, int alignment, int bytesPerPixel)
{
	int w = srcSize.width;
	int s = srcStride;
	BYTE* p = src;
	if (w % alignment)
	{
		while (w % alignment) w++;
		s = w * bytesPerPixel;
		p = (BYTE*)malloc(s * srcSize.height);
	}
	*aligned = p;
	*alignedStride = s;
}
inline void VMX_CopyFromAlignedStrideBufferAndFree(BYTE* aligned, int alignedStride, BYTE* dstBuffer, int dstStride, VMX_SIZE dstSize, int bytesPerPixel)
{
	if (alignedStride != dstStride)
	{
		BYTE* pSrc = aligned;
		for (int y = 0; y < dstSize.height; y++)
		{
			memcpy(dstBuffer, pSrc, dstSize.width * bytesPerPixel);
			dstBuffer += dstStride;
			pSrc += alignedStride;
		}
		free(aligned);
	}
}
inline void VMX_FreeAlignedStrideBuffer(BYTE* aligned, int alignedStride, int srcStride)
{
	if (alignedStride != srcStride)
	{
		free(aligned);
	}
}
inline void VMX_CopyToAlignedStrideBuffer(BYTE* aligned, int alignedStride, BYTE* srcBuffer, int srcStride, VMX_SIZE srcSize, int bytesPerPixel)
{
	if (alignedStride != srcStride)
	{
		BYTE* pDst = aligned;
		for (int y = 0; y < srcSize.height; y++)
		{
			memcpy(pDst, srcBuffer, srcSize.width * bytesPerPixel);
			srcBuffer += srcStride;
			pDst += alignedStride;
		}
	}
}